/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import java.util.ArrayList;
import static java.util.Date.from;
import java.util.Iterator;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import model.Person;
import model.PersonDirectory;
import model.Vitals;
import model.VitalsDirectory;
import model.Encounter;
import model.Patient;

/**
 *
 * @author shubhampatil
 */
public class ViewPersonPanel extends javax.swing.JPanel {

    /**
     * Creates new form ViewPersonPanel
     */
    
    PersonDirectory directory;
    VitalsDirectory vdirectory;
    Encounter ehistory;
    public ViewPersonPanel(PersonDirectory directory, Encounter ehistory) {
        initComponents();
        
        this.directory = directory;
        this.ehistory = ehistory;
         populatetable();
         comboBoxAbnormal();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tablePersonDirectory = new javax.swing.JTable();
        lblHeadingPersonDirectory = new javax.swing.JLabel();
        btnViewVitals = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableViewVitals = new javax.swing.JTable();
        lblHeadingVitals = new javax.swing.JLabel();
        btnDelete = new javax.swing.JButton();
        cmbBoxAbnormal = new javax.swing.JComboBox<>();
        btnReferesh = new javax.swing.JToggleButton();
        jLabel1 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tablePersonDirectory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Person Name", "Id", "Age", "Phone", "Height", "Weight", "House No.", "Community", "City"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablePersonDirectory);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 34, 841, 234));

        lblHeadingPersonDirectory.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        lblHeadingPersonDirectory.setText("Patient Directory");
        add(lblHeadingPersonDirectory, new org.netbeans.lib.awtextra.AbsoluteConstraints(308, 6, -1, -1));

        btnViewVitals.setText("View Vitals");
        btnViewVitals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewVitalsActionPerformed(evt);
            }
        });
        add(btnViewVitals, new org.netbeans.lib.awtextra.AbsoluteConstraints(435, 307, -1, -1));

        tableViewVitals.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Date", "Heart Rate", "Dystolic (BP)", "Systolic (BP)", "Oxgen Level", "Glucose Level", "Cholestrol"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tableViewVitals);
        if (tableViewVitals.getColumnModel().getColumnCount() > 0) {
            tableViewVitals.getColumnModel().getColumn(0).setPreferredWidth(100);
        }

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 405, 841, 347));

        lblHeadingVitals.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        lblHeadingVitals.setText("Vitals");
        add(lblHeadingVitals, new org.netbeans.lib.awtextra.AbsoluteConstraints(357, 365, -1, -1));

        btnDelete.setText("Delete Patient");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        add(btnDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(716, 307, -1, -1));

        cmbBoxAbnormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbBoxAbnormalActionPerformed(evt);
            }
        });
        add(cmbBoxAbnormal, new org.netbeans.lib.awtextra.AbsoluteConstraints(34, 308, -1, -1));

        btnReferesh.setText("Referesh");
        btnReferesh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefereshActionPerformed(evt);
            }
        });
        add(btnReferesh, new org.netbeans.lib.awtextra.AbsoluteConstraints(114, 307, -1, -1));

        jLabel1.setText("Abnormal Patient");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 285, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btnViewVitalsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewVitalsActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tablePersonDirectory.getSelectedRow();
        System.out.println(selectedRowIndex);
//         int selectedColIndex = tablePersonDirectory.getSelectedColumn();
        int ID = (Integer)tablePersonDirectory.getValueAt(selectedRowIndex, 1);
        
        if (selectedRowIndex<0) {
            
            JOptionPane.showMessageDialog(this, "Please select a row to view");
            return;   
        }
        
       populateVitalstable(ID);

         

    }//GEN-LAST:event_btnViewVitalsActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        if(tablePersonDirectory.getSelectedRows() == null){
            JOptionPane.showMessageDialog(this, "Select a row.");
            return;
        }
        //int[] rows = tablePersonDirectory.getSelectedRows();
        DefaultTableModel tm = (DefaultTableModel) tablePersonDirectory.getModel();


        
        int selectedRowIndex = tablePersonDirectory.getSelectedRow();
//         int selectedColIndex = tablePersonDirectory.getSelectedColumn();
  //      System.out.println(selectedRowIndex);
        int ID = (Integer)tablePersonDirectory.getValueAt(selectedRowIndex, 1);
        
 //       tablePersonDirectory.clearSelection();
        
        ArrayList<Person> tuzyaAaichigand = new ArrayList<>();
        for(Person pr : directory.getDirectory()){
            if(pr.getId() == ID){
                //irectory.getDirectory().remove(pr);
                tuzyaAaichigand.add(pr);
            }
        }
        
        directory.getDirectory().removeAll(tuzyaAaichigand);
//        
       
 //       for (int row : rows) {
   //         tm.removeRow(tablePersonDirectory.convertRowIndexToModel(row));
     //   }
        JOptionPane.showMessageDialog(this, "Patient Deleted");
        populatetable();
//        int selectedRowIndex = tablePersonDirectory.getSelectedRow();
//        
//        if (selectedRowIndex<0) {
//            
//            JOptionPane.showMessageDialog(this, "Please select a row to delete");
//            return;   
//        }
//        
//        DefaultTableModel model = (DefaultTableModel) tablePersonDirectory.getModel();
//        Person selectedPerson = (Person) model.get;
//        
//        directory.deleteCars(selectedPerson);
//        
//        JOptionPane.showMessageDialog(this, "Person deleted");
//        
//        populatetable();

    }//GEN-LAST:event_btnDeleteActionPerformed

    private void cmbBoxAbnormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbBoxAbnormalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbBoxAbnormalActionPerformed

    private void btnRefereshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefereshActionPerformed
        // TODO add your handling code here:
         DefaultTableModel model = (DefaultTableModel) tablePersonDirectory.getModel();
         model.setRowCount(0);
//         
         for (int i=0; i<directory.getDirectory().size(); i++){
             Person pr = new Person();
             pr = directory.getDirectory().get(i);
             int ID = pr.getId();
           
             for(int j=0; j<ehistory.getHistory(ID).size();j++){
                 ArrayList<Vitals> ALVitals = new ArrayList<>(); 
                 ALVitals = ehistory.getHistory(ID);
                 Iterator<Vitals> itr = ALVitals.iterator();
                 while(itr.hasNext()){
                    Vitals v = new Vitals();
                    v = itr.next();
                        if(cmbBoxAbnormal.getSelectedItem().equals("Yes")){
                            if(Abnormal(v)){
                                String row[] = {pr.getName(), String.valueOf(pr.getId()), String.valueOf(pr.getAge()), String.valueOf(pr.getPhone()), String.valueOf(pr.getHeight()), String.valueOf(pr.getWeight()), String.valueOf(pr.getHouse_No()), pr.getCommunity_Name(), pr.getCity_name()};
                                model.addRow(row);
                                break;
                            }
                        }
                        else if (cmbBoxAbnormal.getSelectedItem().equals("No")){
                            if(!Abnormal(v)){
                                Object[] row = new Object [9];
            
                                row[0] = pr.getName();
                                row[1] = pr.getId();
                                row[2] = pr.getAge();
                                row[3] = pr.getPhone();
                                row[4] = pr.getHeight();
                                row[5] = pr.getWeight();
                                row[6] = pr.getHouse_No();
                                row[7] = pr.getCommunity_Name();
                                row[8] = pr.getCity_name();
                                model.addRow(row);
                                break;
                            }                          
                        }
                        else if (cmbBoxAbnormal.getSelectedItem().equals("All")){
                            Object[] row = new Object [9];
            
                            row[0] = pr.getName();
                            row[1] = pr.getId();
                            row[2] = pr.getAge();
                            row[3] = pr.getPhone();
                            row[4] = pr.getHeight();
                            row[5] = pr.getWeight();
                            row[6] = pr.getHouse_No();
                            row[7] = pr.getCommunity_Name();
                            row[8] = pr.getCity_name();
                            model.addRow(row);
                            break;
                        }
                    }
                }
                 

        }
        
    }//GEN-LAST:event_btnRefereshActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JToggleButton btnReferesh;
    private javax.swing.JButton btnViewVitals;
    private javax.swing.JComboBox<String> cmbBoxAbnormal;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblHeadingPersonDirectory;
    private javax.swing.JLabel lblHeadingVitals;
    private javax.swing.JTable tablePersonDirectory;
    private javax.swing.JTable tableViewVitals;
    // End of variables declaration//GEN-END:variables

 
private void populatetable() {

        DefaultTableModel model = (DefaultTableModel) tablePersonDirectory.getModel();
        model.setRowCount(0);
        
        for(Person pr : directory.getDirectory()) {
            
            Object[] row = new Object [9];
            
            row[0] = pr.getName();
            row[1] = pr.getId();
            row[2] = pr.getAge();
            row[3] = pr.getPhone();
            row[4] = pr.getHeight();
            row[5] = pr.getWeight();
            row[6] = pr.getHouse_No();
            row[7] = pr.getCommunity_Name();
            row[8] = pr.getCity_name();
            
            model.addRow(row);
        }

}

private void populateVitalstable(int Id) {

        DefaultTableModel model = (DefaultTableModel) tableViewVitals.getModel();
        model.setRowCount(0);
        Person pr = new Person();
        Iterator itr = directory.getDirectory().iterator();
        while(itr.hasNext()){
            pr = (Person) itr.next();
            if(pr.getId() == Id){
                break;
            }
        }
        ArrayList<Vitals> v = new ArrayList<>();
        v = ehistory.getHistory(Id);
        Iterator<Vitals> vtr = v.iterator();
        while(vtr.hasNext()) {
            Vitals vit = vtr.next();
            Object[] row = new Object [7];
            
            row[0] = vit.getTimeStamp();
            row[1] = vit.getHeartRate();
            row[2] = vit.getDystolic();
            row[3] = vit.getSystolic();
            row[4] = vit.getBloodOxygen();
            row[5] = vit.getGlucose();
            row[6] = vit.getCholestrol();
           
            
            model.addRow(row);
        }

}
public void comboBoxAbnormal(){
    
    cmbBoxAbnormal.addItem("All");
    cmbBoxAbnormal.addItem("Yes");
    cmbBoxAbnormal.addItem("No");
    
        
        
    
}
boolean Abnormal(Vitals v) {
    
    if(v.getHeartRate()<50 || v.getHeartRate()>120 ){
        
        return true;
    }
    else if( v.getDystolic()<50 || v.getDystolic()>120 ) { 
        return true;
        
    }
    
    else if(v.getSystolic()<80 || v.getSystolic()>140) {
        
        return true;
    }
    
    else if(v.getBloodOxygen()<85){
        return true;
    }
    else if(v.getGlucose()>100){
        return true;
    }
    else if(v.getCholestrol()>200){
        return true;
    }
    
    else {
        return false;
    }
}

}
