/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import java.util.ArrayList;
import java.util.Iterator;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import model.Person;
import model.PersonDirectory;
import model.Vitals;
import model.VitalsDirectory;
import model.Encounter;

/**
 *
 * @author shubhampatil
 */
public class ViewPersonPanel extends javax.swing.JPanel {

    /**
     * Creates new form ViewPersonPanel
     */
    
    PersonDirectory directory;
    VitalsDirectory vdirectory;
    Encounter ehistory;
    public ViewPersonPanel(PersonDirectory directory, Encounter ehistory) {
        initComponents();
        
        this.directory = directory;
        this.ehistory = ehistory;
         populatetable();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tablePersonDirectory = new javax.swing.JTable();
        lblHeadingPersonDirectory = new javax.swing.JLabel();
        btnViewVitals = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableViewVitals = new javax.swing.JTable();
        lblHeadingVitals = new javax.swing.JLabel();

        tablePersonDirectory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Person Name", "Id", "Age", "Phone", "Height", "Weight", "House No.", "Community", "City"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablePersonDirectory);

        lblHeadingPersonDirectory.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        lblHeadingPersonDirectory.setText("Patient Directory");

        btnViewVitals.setText("View Vitals");
        btnViewVitals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewVitalsActionPerformed(evt);
            }
        });

        tableViewVitals.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Date", "Heart Rate", "Dystolic (BP)", "Systolic (BP)", "Oxgen Level", "Glucose Level", "Cholestrol"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tableViewVitals);

        lblHeadingVitals.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        lblHeadingVitals.setText("Vitals");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 778, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnViewVitals)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGap(13, 13, 13)
                                        .addComponent(lblHeadingVitals)))
                                .addGap(329, 329, 329))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(lblHeadingPersonDirectory)
                                .addGap(320, 320, 320))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 769, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblHeadingPersonDirectory)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnViewVitals)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(lblHeadingVitals)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnViewVitalsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewVitalsActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tablePersonDirectory.getSelectedRow();
//         int selectedColIndex = tablePersonDirectory.getSelectedColumn();
        int ID = (Integer)tablePersonDirectory.getValueAt(selectedRowIndex, 1);
        
        if (selectedRowIndex<0) {
            
            JOptionPane.showMessageDialog(this, "Please select a row to view");
            return;   
        }
        
       populateVitalstable(ID);

         

    }//GEN-LAST:event_btnViewVitalsActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnViewVitals;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblHeadingPersonDirectory;
    private javax.swing.JLabel lblHeadingVitals;
    private javax.swing.JTable tablePersonDirectory;
    private javax.swing.JTable tableViewVitals;
    // End of variables declaration//GEN-END:variables

 
private void populatetable() {

        DefaultTableModel model = (DefaultTableModel) tablePersonDirectory.getModel();
        model.setRowCount(0);
        
        for(Person pr : directory.getDirectory()) {
            
            Object[] row = new Object [9];
            
            row[0] = pr.getName();
            row[1] = pr.getId();
            row[2] = pr.getAge();
            row[3] = pr.getPhone();
            row[4] = pr.getHeight();
            row[5] = pr.getWeight();
            row[6] = pr.getHouse_No();
            row[7] = pr.getCommunity_Name();
            row[8] = pr.getCity_name();
            
            model.addRow(row);
        }

}

private void populateVitalstable(int Id) {

        DefaultTableModel model = (DefaultTableModel) tableViewVitals.getModel();
        model.setRowCount(0);
        Person pr = new Person();
        Iterator itr = directory.getDirectory().iterator();
        while(itr.hasNext()){
            pr = (Person) itr.next();
            if(pr.getId() == Id){
                break;
            }
        }
        ArrayList<Vitals> v = new ArrayList<>();
        v = ehistory.getHistory(Id);
        Iterator<Vitals> vtr = v.iterator();
        while(vtr.hasNext()) {
            Vitals vit = vtr.next();
            Object[] row = new Object [7];
            
            row[0] = vit.getTimeStamp();
            row[1] = vit.getHeartRate();
            row[2] = vit.getDystolic();
            row[3] = vit.getSystolic();
            row[4] = vit.getBloodOxygen();
            row[5] = vit.getGlucose();
            row[6] = vit.getCholestrol();
           
            
            model.addRow(row);
        }

}
}
